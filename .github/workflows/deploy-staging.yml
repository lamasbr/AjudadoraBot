name: Docker-Powered Azure Deployment (Staging)

on:
  push:
    branches: [ staging, develop ]
    tags: [ 'rc*' ]
  pull_request:
    branches: [ staging, develop ]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests (for emergency deployments)'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  packages: write

concurrency:
  group: ci-staging-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Application Configuration
  DOTNET_VERSION: '9.0'
  NODE_VERSION: '20'
  APP_NAME: 'ajudadorabot'
  ENVIRONMENT: 'staging'
  
  # Docker Configuration
  DOCKER_BUILDKIT: '1'
  
  # GitHub Container Registry (Free)
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/ajudadorabot
  
  # Azure Resources (Staging)
  AZURE_WEBAPP_NAME: 'ajudadorabot-staging-app'
  AZURE_RESOURCE_GROUP: 'ajudadorabot-staging-rg'
  
  # Datadog Configuration
  DD_SITE: 'datadoghq.com'
  DD_SERVICE: 'ajudadorabot'
  DD_ENV: 'staging'

jobs:
  # ================================
  # Backend Testing (Staging)
  # ================================
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests && github.event_name == 'pull_request' }}
    
    steps:
    - uses: actions/checkout@v4
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore --configuration Release
      
    - name: Run Unit Tests
      run: |
        dotnet test tests/AjudadoraBot.UnitTests/AjudadoraBot.UnitTests.csproj \
          --no-build \
          --configuration Release \
          --logger trx \
          --collect:"XPlat Code Coverage" \
          --results-directory ./test-results/unit
          
    - name: Run Integration Tests
      run: |
        dotnet test tests/AjudadoraBot.IntegrationTests/AjudadoraBot.IntegrationTests.csproj \
          --no-build \
          --configuration Release \
          --logger trx \
          --collect:"XPlat Code Coverage" \
          --results-directory ./test-results/integration
          
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-backend
        path: test-results/
        retention-days: 5

  # ================================
  # Frontend Testing (Staging)
  # ================================
  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests && github.event_name == 'pull_request' }}
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: frontend
      run: npm ci
      
    - name: Run ESLint
      working-directory: frontend
      run: npm run lint
      
    - name: Run Tests
      working-directory: frontend
      run: npm run test:ci
      
    - name: Upload Frontend Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-frontend
        path: frontend/coverage/
        retention-days: 5

  # ================================
  # Build and Push Combined Container with Docker
  # ================================
  build-and-push:
    name: Build Combined Container (Docker)
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/rc')
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          image=moby/buildkit:latest
          
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Generate Version
      id: version
      run: |
        if [[ "${{ github.ref }}" == refs/tags/rc* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
          VERSION="1.0.0-staging.$(date +%Y%m%d).${GITHUB_RUN_NUMBER}"
        else
          BRANCH_NAME=$(echo "${{ github.ref_name }}" | sed 's/[^a-zA-Z0-9]/-/g')
          VERSION="1.0.0-${BRANCH_NAME}.${GITHUB_RUN_NUMBER}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Generated version: $VERSION"
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha
          type=sha,prefix={{branch}}-
          type=raw,value=staging,enable=true
        labels: |
          org.opencontainers.image.title=AjudadoraBot Combined App (Staging)
          org.opencontainers.image.description=Staging build of combined frontend and backend
          org.opencontainers.image.vendor=AjudadoraBot Team
          org.opencontainers.image.version=${{ steps.version.outputs.version }}
          azure.app-service.optimized=true
          azure.tier=F1
          datadog.monitored=true
          build.tool=docker
          container.runtime=docker
          
    - name: Build and push Combined Container image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.combined
        platforms: linux/amd64
        push: true
        tags: |
          ${{ steps.meta.outputs.tags }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VERSION=${{ steps.version.outputs.version }}

  # ================================
  # Deploy to Azure App Service (Staging)
  # ================================
  deploy-staging:
    name: Deploy to Azure (Staging)
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: |
      (github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/rc')) &&
      github.event_name != 'pull_request'
    environment:
      name: staging
      url: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net
    timeout-minutes: 30
    
    steps:
    - name: Checkout repository (for Terraform)
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.12.2
        
    - name: Azure Login (Service Principal)
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Terraform Init
      working-directory: ./terraform
      env:
        ARM_CLIENT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientId }}
        ARM_CLIENT_SECRET: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientSecret }}
        ARM_TENANT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).tenantId }}
        ARM_SUBSCRIPTION_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).subscriptionId }}
      run: |
        set -e
        RG="${{ vars.AZURE_TF_STORAGE_ACCOUNT_NAME }}"
        SA="${{ vars.AZURE_TF_STORAGE_ACCOUNT_NAME }}"
        CT="${{ vars.AZURE_TF_CONTAINER_NAME }}"
        KEY="${{ vars.AZURE_TF_TFSTATE_NAME }}"
        ACCESS_KEY="${{ secrets.AZURE_TF_STORAGE_ACCOUNT_ACCESSKEY }}"
        
        if [ -z "$RG" ] || [ -z "$SA" ] || [ -z "$CT" ] || [ -z "$KEY" ] || [ -z "$ACCESS_KEY" ]; then
          echo "ERROR: Missing required variables or secrets:"
          echo "  AZURE_TF_STORAGE_ACCOUNT_NAME: ${RG:-NOT_SET}"
          echo "  AZURE_TF_STORAGE_ACCOUNT_NAME: ${SA:-NOT_SET}"
          echo "  AZURE_TF_CONTAINER_NAME: ${CT:-NOT_SET}"
          echo "  AZURE_TF_TFSTATE_NAME: ${KEY:-NOT_SET}"
          echo "  AZURE_TF_STORAGE_ACCOUNT_ACCESSKEY: ${ACCESS_KEY:+SET}"
          exit 1
        fi
        
        echo "Initializing Terraform backend with access key auth..."
        terraform init \
          -backend-config="resource_group_name=$RG" \
          -backend-config="storage_account_name=$SA" \
          -backend-config="container_name=$CT" \
          -backend-config="key=$KEY" \
          -backend-config="access_key=$ACCESS_KEY"
        
    - name: Terraform Plan (staging)
      working-directory: ./terraform
      env:
        ARM_CLIENT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientId }}
        ARM_CLIENT_SECRET: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientSecret }}
        ARM_TENANT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).tenantId }}
        ARM_SUBSCRIPTION_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).subscriptionId }}
        TF_VAR_environment: staging
        TF_VAR_telegram_bot_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TF_VAR_datadog_api_key: ${{ secrets.DATADOG_API_KEY }}
        TF_VAR_ghcr_username: ${{ github.actor }}
        TF_VAR_ghcr_token: ${{ secrets.GITHUB_TOKEN }}
      run: terraform plan -out=tfplan
        
    - name: Terraform Apply (staging)
      working-directory: ./terraform
      env:
        ARM_CLIENT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientId }}
        ARM_CLIENT_SECRET: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientSecret }}
        ARM_TENANT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).tenantId }}
        ARM_SUBSCRIPTION_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).subscriptionId }}
      run: terraform apply -auto-approve tfplan
        
    - name: Get Terraform Outputs
      id: terraform-outputs
      working-directory: ./terraform
      run: |
        echo "app-service-name=$(terraform output -raw app_service_name)" >> $GITHUB_OUTPUT
        echo "resource-group-name=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT
        echo "app-service-url=$(terraform output -raw app_service_url)" >> $GITHUB_OUTPUT
        echo "swagger-url=$(terraform output -raw swagger_url)" >> $GITHUB_OUTPUT
        
    - name: Deploy Container to App Service
      run: |
        az webapp config container set \
          --name ${{ steps.terraform-outputs.outputs.app-service-name }} \
          --resource-group ${{ steps.terraform-outputs.outputs.resource-group-name }} \
          --docker-custom-image-name ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          --docker-registry-server-url https://${{ env.REGISTRY }} \
          --docker-registry-server-user ${{ github.actor }} \
          --docker-registry-server-password ${{ secrets.GITHUB_TOKEN }}
        
    - name: Wait for container startup
      run: sleep 90
        
    - name: Health Check
      if: ${{ false }}
      run: |
        max_attempts=15
        attempt=1
        URL=${{ steps.terraform-outputs.outputs.app-service-url }}/health
        while [ $attempt -le $max_attempts ]; do
          echo "Health check attempt $attempt/$max_attempts -> $URL"
          if curl -f -s --max-time 30 "$URL"; then
            echo "Health check passed!"
            break
          fi
          if [ $attempt -eq $max_attempts ]; then
            echo "Health check failed after $max_attempts attempts"
            exit 1
          fi
          echo "Health check failed, retrying in 20 seconds..."
          sleep 20
          attempt=$((attempt + 1))
        done
        
    - name: Test API Endpoints
      run: |
        curl -f ${{ steps.terraform-outputs.outputs.app-service-url }}/health
        curl -f ${{ steps.terraform-outputs.outputs.swagger-url }} || echo "Swagger may not be enabled in staging"
        curl -f ${{ steps.terraform-outputs.outputs.app-service-url }}/ || echo "Frontend may not be available yet"
        
    - name: Notify Datadog Deployment
      if: always()
      run: |
        curl -X POST "https://api.${{ env.DD_SITE }}/api/v1/events" \
        -H "Content-Type: application/json" \
        -H "DD-API-KEY: ${{ secrets.DATADOG_API_KEY }}" \
        -d '{
          "title": "AjudadoraBot Deployment (Staging)",
          "text": "Deployed version ${{ github.sha }} to staging.",
          "tags": ["environment:staging", "service:ajudadorabot", "deployment", "build-tool:docker", "runtime:docker"],
          "alert_type": "info"
        }' || echo "Failed to notify Datadog"
        
    - name: Azure Logout
      if: always()
      run: az logout
