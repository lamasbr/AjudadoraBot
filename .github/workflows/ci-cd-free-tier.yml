name: Cost-Optimized Azure Deployment (Free Tier)

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests (for emergency deployments)'
        required: false
        default: false
        type: boolean

env:
  # Application Configuration
  DOTNET_VERSION: '9.0'
  NODE_VERSION: '20'
  APP_NAME: 'ajudadorabot'
  ENVIRONMENT: 'production'
  
  # GitHub Container Registry (Free)
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/ajudadorabot
  
  # Azure Resources (Free Tier)
  AZURE_WEBAPP_NAME: 'ajudadorabot-production-app'
  AZURE_RESOURCE_GROUP: 'ajudadorabot-production-rg'
  
  # Datadog Configuration
  DD_SITE: 'datadoghq.com'
  DD_SERVICE: 'ajudadorabot'
  DD_ENV: 'production'

jobs:
  # ================================
  # Code Quality & Security Analysis
  # ================================
  analyze:
    name: Code Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'csharp', 'javascript' ]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality
        
    - name: Setup .NET
      if: matrix.language == 'csharp'
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      if: matrix.language == 'csharp'
      run: dotnet restore
      
    - name: Build
      if: matrix.language == 'csharp'
      run: dotnet build --no-restore
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  # ================================
  # Backend Testing (Optimized)
  # ================================
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests && github.event_name == 'pull_request' }}
    
    steps:
    - uses: actions/checkout@v4
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore --configuration Release
      
    - name: Run Unit Tests
      run: |
        dotnet test tests/AjudadoraBot.UnitTests/AjudadoraBot.UnitTests.csproj \
          --no-build \
          --configuration Release \
          --logger trx \
          --collect:"XPlat Code Coverage" \
          --results-directory ./test-results/unit
          
    - name: Run Integration Tests
      run: |
        dotnet test tests/AjudadoraBot.IntegrationTests/AjudadoraBot.IntegrationTests.csproj \
          --no-build \
          --configuration Release \
          --logger trx \
          --collect:"XPlat Code Coverage" \
          --results-directory ./test-results/integration
          
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-backend
        path: test-results/
        retention-days: 5 # Reduced retention for cost optimization

  # ================================
  # Frontend Testing (Optimized)
  # ================================
  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests && github.event_name == 'pull_request' }}
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: frontend
      run: npm ci
      
    - name: Run ESLint
      working-directory: frontend
      run: npm run lint
      
    - name: Run Tests
      working-directory: frontend
      run: npm run test:ci
      
    - name: Upload Frontend Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-frontend
        path: frontend/coverage/
        retention-days: 5

  # ================================
  # Build and Push Combined Container
  # ================================
  build-and-push:
    name: Build Combined Container
    runs-on: ubuntu-latest
    needs: [analyze]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=AjudadoraBot Combined App
          org.opencontainers.image.description=Cost-optimized Telegram bot with combined frontend and backend
          org.opencontainers.image.vendor=AjudadoraBot Team
          azure.app-service.optimized=true
          azure.tier=F1
          datadog.monitored=true
          
    - name: Build and push Combined Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.combined
        platforms: linux/amd64 # Single platform for cost optimization
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

  # ================================
  # Container Security Scanning
  # ================================
  security-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: always() && needs.build-and-push.result == 'success'
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # ================================
  # Deploy to Azure App Service (Free Tier)
  # ================================
  deploy-production:
    name: Deploy to Azure (Free Tier)
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: |
      (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')) &&
      github.event_name != 'pull_request'
    environment:
      name: production
      url: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net
      
    steps:
    - name: Checkout repository (for Terraform)
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.5
        
    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        
    - name: Terraform Plan
      working-directory: ./terraform
      run: terraform plan -out=tfplan
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        TF_VAR_telegram_bot_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TF_VAR_datadog_api_key: ${{ secrets.DATADOG_API_KEY }}
        TF_VAR_ghcr_username: ${{ github.actor }}
        TF_VAR_ghcr_token: ${{ secrets.GITHUB_TOKEN }}
        TF_VAR_alert_email: ${{ secrets.ALERT_EMAIL }}
        
    - name: Terraform Apply
      working-directory: ./terraform
      run: terraform apply -auto-approve tfplan
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        
    - name: Get Terraform Outputs
      id: terraform-outputs
      working-directory: ./terraform
      run: |
        echo "app-service-name=$(terraform output -raw app_service_name)" >> $GITHUB_OUTPUT
        echo "resource-group-name=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT
        echo "app-service-url=$(terraform output -raw app_service_url)" >> $GITHUB_OUTPUT
        
    - name: Deploy Container to App Service
      run: |
        az webapp config container set \
          --name ${{ steps.terraform-outputs.outputs.app-service-name }} \
          --resource-group ${{ steps.terraform-outputs.outputs.resource-group-name }} \
          --docker-custom-image-name ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          --docker-registry-server-url https://${{ env.REGISTRY }} \
          --docker-registry-server-user ${{ github.actor }} \
          --docker-registry-server-password ${{ secrets.GITHUB_TOKEN }}
        
    - name: Wait for container startup
      run: sleep 90 # F1 tier can be slow to start
        
    - name: Health Check
      run: |
        max_attempts=15
        attempt=1
        
        while [ $attempt -le $max_attempts ]; do
          echo "Health check attempt $attempt/$max_attempts"
          
          if curl -f -s --max-time 30 ${{ steps.terraform-outputs.outputs.app-service-url }}/health; then
            echo "Health check passed!"
            break
          fi
          
          if [ $attempt -eq $max_attempts ]; then
            echo "Health check failed after $max_attempts attempts"
            exit 1
          fi
          
          echo "Health check failed, retrying in 20 seconds..."
          sleep 20
          attempt=$((attempt + 1))
        done
        
    - name: Test API Endpoints
      run: |
        # Test health endpoint
        curl -f ${{ steps.terraform-outputs.outputs.app-service-url }}/health
        
        # Test API documentation
        curl -f ${{ steps.terraform-outputs.outputs.app-service-url }}/api-docs || echo "Swagger may not be enabled in production"
        
        # Test frontend (should serve index.html)
        curl -f ${{ steps.terraform-outputs.outputs.app-service-url }}/ || echo "Frontend may not be available yet"
        
    - name: Configure Telegram Webhook
      run: |
        # Set webhook URL for Telegram bot
        WEBHOOK_URL="${{ steps.terraform-outputs.outputs.app-service-url }}/webhook"
        echo "Setting Telegram webhook to: $WEBHOOK_URL"
        
        # This would typically call Telegram API to set webhook
        # curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/setWebhook" -d "url=$WEBHOOK_URL"
        
    - name: Notify Datadog Deployment
      if: always()
      run: |
        curl -X POST "https://api.${{ env.DD_SITE }}/api/v1/events" \
        -H "Content-Type: application/json" \
        -H "DD-API-KEY: ${{ secrets.DATADOG_API_KEY }}" \
        -d '{
          "title": "AjudadoraBot Deployment",
          "text": "Deployed version ${{ github.sha }} to production",
          "tags": ["environment:production", "service:ajudadorabot", "deployment"],
          "alert_type": "info"
        }' || echo "Failed to notify Datadog"
        
    - name: Azure Logout
      if: always()
      run: az logout

  # ================================
  # Rollback Job (if deployment fails)
  # ================================
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: [deploy-production]
    environment:
      name: production
      
    steps:
    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Get Previous Container Image
      id: previous-image
      run: |
        # Get the second-to-last image from GHCR
        PREVIOUS_TAG=$(curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/user/packages/container/${{ env.IMAGE_NAME }}/versions" | \
          jq -r '.[1].metadata.container.tags[0]' 2>/dev/null || echo "latest")
        echo "previous-tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
        
    - name: Rollback to Previous Version
      run: |
        az webapp config container set \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --docker-custom-image-name ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.previous-image.outputs.previous-tag }} \
          --docker-registry-server-url https://${{ env.REGISTRY }} \
          --docker-registry-server-user ${{ github.actor }} \
          --docker-registry-server-password ${{ secrets.GITHUB_TOKEN }}
        
    - name: Verify Rollback
      run: |
        sleep 60
        curl -f https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/health || exit 1
        
    - name: Notify Rollback
      run: |
        curl -X POST "https://api.${{ env.DD_SITE }}/api/v1/events" \
        -H "Content-Type: application/json" \
        -H "DD-API-KEY: ${{ secrets.DATADOG_API_KEY }}" \
        -d '{
          "title": "AjudadoraBot Rollback",
          "text": "Rolled back deployment due to failure",
          "tags": ["environment:production", "service:ajudadorabot", "rollback"],
          "alert_type": "warning"
        }' || echo "Failed to notify Datadog"
        
    - name: Azure Logout
      if: always()
      run: az logout