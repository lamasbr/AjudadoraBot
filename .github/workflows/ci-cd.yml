name: nerdctl-Powered Azure Deployment (Free Tier)

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests (for emergency deployments)'
        required: false
        default: false
        type: boolean

env:
  # Application Configuration
  DOTNET_VERSION: '9.0'
  NODE_VERSION: '20'
  APP_NAME: 'ajudadorabot'
  ENVIRONMENT: 'production'
  
  # Container Runtime Configuration
  NERDCTL_VERSION: '1.7.6'
  CONTAINERD_VERSION: '1.7.20'
  
  # GitHub Container Registry (Free)
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/ajudadorabot
  
  # Azure Resources (Free Tier)
  AZURE_WEBAPP_NAME: 'ajudadorabot-production-app'
  AZURE_RESOURCE_GROUP: 'ajudadorabot-production-rg'
  
  # Datadog Configuration
  DD_SITE: 'datadoghq.com'
  DD_SERVICE: 'ajudadorabot'
  DD_ENV: 'production'

jobs:
  # ================================
  # Code Quality & Security Analysis (DISABLED)
  # ================================
  # analyze:
  #   name: Code Analysis
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
  #   permissions:
  #     actions: read
  #     contents: read
  #     security-events: write
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       language: [ 'csharp', 'javascript' ]
  #   
  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v4
  #     with:
  #       fetch-depth: 0
  #   
  #   - name: Initialize CodeQL
  #     uses: github/codeql-action/init@v3
  #     with:
  #       languages: ${{ matrix.language }}
  #       queries: security-extended,security-and-quality
  #       
  #   - name: Setup .NET
  #     if: matrix.language == 'csharp'
  #     uses: actions/setup-dotnet@v4
  #     with:
  #       dotnet-version: ${{ env.DOTNET_VERSION }}
  #       
  #   - name: Restore dependencies
  #     if: matrix.language == 'csharp'
  #     run: dotnet restore
  #     
  #   - name: Build
  #     if: matrix.language == 'csharp'
  #     run: dotnet build --no-restore
  #   
  #   - name: Perform CodeQL Analysis
  #     uses: github/codeql-action/analyze@v3
  #     with:
  #       category: "/language:${{matrix.language}}"

  # ================================
  # Backend Testing (Optimized)
  # ================================
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests && github.event_name == 'pull_request' }}
    
    steps:
    - uses: actions/checkout@v4
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore --configuration Release
      
    - name: Run Unit Tests
      run: |
        dotnet test tests/AjudadoraBot.UnitTests/AjudadoraBot.UnitTests.csproj \
          --no-build \
          --configuration Release \
          --logger trx \
          --collect:"XPlat Code Coverage" \
          --results-directory ./test-results/unit
          
    - name: Run Integration Tests
      run: |
        dotnet test tests/AjudadoraBot.IntegrationTests/AjudadoraBot.IntegrationTests.csproj \
          --no-build \
          --configuration Release \
          --logger trx \
          --collect:"XPlat Code Coverage" \
          --results-directory ./test-results/integration
          
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-backend
        path: test-results/
        retention-days: 5 # Reduced retention for cost optimization

  # ================================
  # Frontend Testing (Optimized)
  # ================================
  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests && github.event_name == 'pull_request' }}
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: frontend
      run: npm ci
      
    - name: Run ESLint
      working-directory: frontend
      run: npm run lint
      
    - name: Run Tests
      working-directory: frontend
      run: npm run test:ci
      
    - name: Upload Frontend Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-frontend
        path: frontend/coverage/
        retention-days: 5

  # ================================
  # Build and Push Combined Container with nerdctl
  # ================================
  build-and-push:
    name: Build Combined Container (nerdctl)
    runs-on: ubuntu-latest
    # needs: [analyze] # Disabled code analysis
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup containerd
      run: |
        # Install containerd if not present
        sudo apt-get update
        sudo apt-get install -y containerd.io
        sudo systemctl start containerd
        sudo systemctl enable containerd
      
    - name: Setup nerdctl
      run: |
        # Download and install nerdctl
        curl -sSL "https://github.com/containerd/nerdctl/releases/download/v${{ env.NERDCTL_VERSION }}/nerdctl-${{ env.NERDCTL_VERSION }}-linux-amd64.tar.gz" -o nerdctl.tar.gz
        sudo tar -xzf nerdctl.tar.gz -C /usr/local/bin/
        sudo chmod +x /usr/local/bin/nerdctl
        
        # Configure nerdctl for rootless mode (optional, for better security)
        sudo usermod -aG containerd $USER || true
        
        # Verify installation
        nerdctl version
        nerdctl info
      
    - name: Setup buildkit
      run: |
        # Install buildkit for advanced build features
        curl -sSL "https://github.com/moby/buildkit/releases/download/v0.12.5/buildkit-v0.12.5.linux-amd64.tar.gz" -o buildkit.tar.gz
        sudo tar -xzf buildkit.tar.gz -C /usr/local/
        sudo systemctl start buildkit || sudo /usr/local/bin/buildkitd --addr unix:///run/buildkit/buildkitd.sock --group docker &
      
    - name: Log in to GitHub Container Registry
      run: |
        echo "${{ secrets.GITHUB_TOKEN }}" | nerdctl login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=AjudadoraBot Combined App
          org.opencontainers.image.description=Cost-optimized Telegram bot with combined frontend and backend (built with nerdctl)
          org.opencontainers.image.vendor=AjudadoraBot Team
          azure.app-service.optimized=true
          azure.tier=F1
          datadog.monitored=true
          build.tool=nerdctl
          container.runtime=containerd
          
    - name: Build and push Combined Container image with nerdctl
      id: build
      run: |
        set -e
        
        # Set build arguments
        BUILD_DATE="${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}"
        VERSION="${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}"
        
        # Get the primary tag for the build
        PRIMARY_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
        
        echo "Building with nerdctl..."
        echo "Primary tag: $PRIMARY_TAG"
        echo "Build date: $BUILD_DATE"
        echo "Version: $VERSION"
        
        # Build with nerdctl (more efficient than Docker)
        nerdctl build \
          --file ./Dockerfile.combined \
          --platform linux/amd64 \
          --build-arg BUILDKIT_INLINE_CACHE=1 \
          --build-arg BUILD_DATE="$BUILD_DATE" \
          --build-arg VERSION="$VERSION" \
          --label "org.opencontainers.image.title=AjudadoraBot Combined App" \
          --label "org.opencontainers.image.description=Cost-optimized Telegram bot with combined frontend and backend (built with nerdctl)" \
          --label "org.opencontainers.image.vendor=AjudadoraBot Team" \
          --label "azure.app-service.optimized=true" \
          --label "azure.tier=F1" \
          --label "datadog.monitored=true" \
          --label "build.tool=nerdctl" \
          --label "container.runtime=containerd" \
          --tag "$PRIMARY_TAG" \
          .
        
        # Tag with all metadata tags
        echo "${{ steps.meta.outputs.tags }}" | while read -r tag; do
          if [ "$tag" != "$PRIMARY_TAG" ]; then
            echo "Tagging: $tag"
            nerdctl tag "$PRIMARY_TAG" "$tag"
          fi
        done
        
        # Push all tags
        echo "Pushing images..."
        echo "${{ steps.meta.outputs.tags }}" | while read -r tag; do
          echo "Pushing: $tag"
          nerdctl push "$tag"
        done
        
        # Get image digest for output
        DIGEST=$(nerdctl image inspect "$PRIMARY_TAG" --format '{{.RepoDigests}}' | grep -o 'sha256:[a-f0-9]\{64\}' | head -1)
        echo "digest=$DIGEST" >> $GITHUB_OUTPUT
        
        echo "Build and push completed successfully with nerdctl!"
        
        # Show final image info
        nerdctl images --filter reference="$PRIMARY_TAG"

  # ================================
  # Container Security Scanning (nerdctl compatible)
  # ================================
  security-scan:
    name: Container Security Scan (nerdctl)
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: always() && needs.build-and-push.result == 'success'
    
    steps:
    - name: Setup containerd and nerdctl
      run: |
        # Install containerd
        sudo apt-get update
        sudo apt-get install -y containerd.io
        sudo systemctl start containerd
        
        # Install nerdctl
        curl -sSL "https://github.com/containerd/nerdctl/releases/download/v${{ env.NERDCTL_VERSION }}/nerdctl-${{ env.NERDCTL_VERSION }}-linux-amd64.tar.gz" -o nerdctl.tar.gz
        sudo tar -xzf nerdctl.tar.gz -C /usr/local/bin/
        sudo chmod +x /usr/local/bin/nerdctl
    
    - name: Log in to GitHub Container Registry
      run: |
        echo "${{ secrets.GITHUB_TOKEN }}" | nerdctl login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
    
    - name: Pull image for scanning
      run: |
        IMAGE_REF="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        echo "Pulling image: $IMAGE_REF"
        nerdctl pull "$IMAGE_REF"
        
        # Verify image was pulled successfully
        nerdctl images --filter reference="$IMAGE_REF"
    
    - name: Run Trivy vulnerability scanner on nerdctl image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        
    - name: Generate security report with nerdctl
      run: |
        IMAGE_REF="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        
        echo "# Security Scan Report (nerdctl)" > security-report.md
        echo "**Image:** $IMAGE_REF" >> security-report.md
        echo "**Built with:** nerdctl + containerd" >> security-report.md
        echo "**Scan Date:** $(date)" >> security-report.md
        echo "" >> security-report.md
        
        # Add image information
        echo "## Image Information" >> security-report.md
        nerdctl image inspect "$IMAGE_REF" --format '**Size:** {{.Size}} bytes' >> security-report.md || true
        nerdctl image inspect "$IMAGE_REF" --format '**Architecture:** {{.Architecture}}' >> security-report.md || true
        nerdctl image inspect "$IMAGE_REF" --format '**OS:** {{.Os}}' >> security-report.md || true
        echo "" >> security-report.md
        
        # Add vulnerability summary
        echo "## Vulnerability Summary" >> security-report.md
        trivy image --format table "$IMAGE_REF" >> security-report.md 2>/dev/null || echo "Trivy scan details in SARIF file" >> security-report.md
        
    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report-nerdctl
        path: security-report.md
        retention-days: 30
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # ================================
  # Deploy to Azure App Service (Free Tier)
  # ================================
  deploy-production:
    name: Deploy to Azure (Free Tier)
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: |
      (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')) &&
      github.event_name != 'pull_request'
    environment:
      name: production
      url: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net
      
    steps:
    - name: Checkout repository (for Terraform)
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.5
        
    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        
    - name: Terraform Plan
      working-directory: ./terraform
      run: terraform plan -out=tfplan
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        TF_VAR_telegram_bot_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TF_VAR_datadog_api_key: ${{ secrets.DATADOG_API_KEY }}
        TF_VAR_ghcr_username: ${{ github.actor }}
        TF_VAR_ghcr_token: ${{ secrets.GITHUB_TOKEN }}
        TF_VAR_alert_email: ${{ secrets.ALERT_EMAIL }}
        
    - name: Terraform Apply
      working-directory: ./terraform
      run: terraform apply -auto-approve tfplan
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        
    - name: Get Terraform Outputs
      id: terraform-outputs
      working-directory: ./terraform
      run: |
        echo "app-service-name=$(terraform output -raw app_service_name)" >> $GITHUB_OUTPUT
        echo "resource-group-name=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT
        echo "app-service-url=$(terraform output -raw app_service_url)" >> $GITHUB_OUTPUT
        
    - name: Deploy Container to App Service
      run: |
        az webapp config container set \
          --name ${{ steps.terraform-outputs.outputs.app-service-name }} \
          --resource-group ${{ steps.terraform-outputs.outputs.resource-group-name }} \
          --docker-custom-image-name ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          --docker-registry-server-url https://${{ env.REGISTRY }} \
          --docker-registry-server-user ${{ github.actor }} \
          --docker-registry-server-password ${{ secrets.GITHUB_TOKEN }}
        
    - name: Wait for container startup
      run: sleep 90 # F1 tier can be slow to start
        
    - name: Health Check
      run: |
        max_attempts=15
        attempt=1
        
        while [ $attempt -le $max_attempts ]; do
          echo "Health check attempt $attempt/$max_attempts"
          
          if curl -f -s --max-time 30 ${{ steps.terraform-outputs.outputs.app-service-url }}/health; then
            echo "Health check passed!"
            break
          fi
          
          if [ $attempt -eq $max_attempts ]; then
            echo "Health check failed after $max_attempts attempts"
            exit 1
          fi
          
          echo "Health check failed, retrying in 20 seconds..."
          sleep 20
          attempt=$((attempt + 1))
        done
        
    - name: Test API Endpoints
      run: |
        # Test health endpoint
        curl -f ${{ steps.terraform-outputs.outputs.app-service-url }}/health
        
        # Test API documentation
        curl -f ${{ steps.terraform-outputs.outputs.app-service-url }}/api-docs || echo "Swagger may not be enabled in production"
        
        # Test frontend (should serve index.html)
        curl -f ${{ steps.terraform-outputs.outputs.app-service-url }}/ || echo "Frontend may not be available yet"
        
    - name: Configure Telegram Webhook
      run: |
        # Set webhook URL for Telegram bot
        WEBHOOK_URL="${{ steps.terraform-outputs.outputs.app-service-url }}/webhook"
        echo "Setting Telegram webhook to: $WEBHOOK_URL"
        
        # This would typically call Telegram API to set webhook
        # curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/setWebhook" -d "url=$WEBHOOK_URL"
        
    - name: Notify Datadog Deployment
      if: always()
      run: |
        curl -X POST "https://api.${{ env.DD_SITE }}/api/v1/events" \
        -H "Content-Type: application/json" \
        -H "DD-API-KEY: ${{ secrets.DATADOG_API_KEY }}" \
        -d '{
          "title": "AjudadoraBot Deployment (nerdctl)",
          "text": "Deployed version ${{ github.sha }} to production. Built with nerdctl + containerd for enhanced performance and resource efficiency.",
          "tags": ["environment:production", "service:ajudadorabot", "deployment", "build-tool:nerdctl", "runtime:containerd"],
          "alert_type": "info"
        }' || echo "Failed to notify Datadog"
        
    - name: Azure Logout
      if: always()
      run: az logout

  # ================================
  # Rollback Job with nerdctl support (if deployment fails)
  # ================================
  rollback:
    name: Rollback Deployment (nerdctl)
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: [deploy-production]
    environment:
      name: production
      
    steps:
    - name: Setup containerd and nerdctl
      run: |
        # Install containerd
        sudo apt-get update
        sudo apt-get install -y containerd.io
        sudo systemctl start containerd
        
        # Install nerdctl
        curl -sSL "https://github.com/containerd/nerdctl/releases/download/v${{ env.NERDCTL_VERSION }}/nerdctl-${{ env.NERDCTL_VERSION }}-linux-amd64.tar.gz" -o nerdctl.tar.gz
        sudo tar -xzf nerdctl.tar.gz -C /usr/local/bin/
        sudo chmod +x /usr/local/bin/nerdctl
    
    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Get Previous Container Image with nerdctl compatibility
      id: previous-image
      run: |
        # Log in to registry with nerdctl
        echo "${{ secrets.GITHUB_TOKEN }}" | nerdctl login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
        
        # Get the second-to-last image from GHCR API
        PREVIOUS_TAG=$(curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/user/packages/container/${{ env.IMAGE_NAME }}/versions" | \
          jq -r '.[1].metadata.container.tags[0]' 2>/dev/null || echo "latest")
        echo "previous-tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
        
        # Verify the previous image exists and can be pulled with nerdctl
        PREVIOUS_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$PREVIOUS_TAG"
        echo "Verifying rollback image: $PREVIOUS_IMAGE"
        
        if nerdctl pull "$PREVIOUS_IMAGE"; then
          echo "✅ Rollback image verified and ready"
          nerdctl images --filter reference="$PREVIOUS_IMAGE"
        else
          echo "❌ Warning: Could not verify rollback image, using 'latest' as fallback"
          echo "previous-tag=latest" >> $GITHUB_OUTPUT
        fi
        
    - name: Rollback to Previous Version
      run: |
        ROLLBACK_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.previous-image.outputs.previous-tag }}"
        echo "Rolling back to: $ROLLBACK_IMAGE"
        
        az webapp config container set \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --docker-custom-image-name "$ROLLBACK_IMAGE" \
          --docker-registry-server-url https://${{ env.REGISTRY }} \
          --docker-registry-server-user ${{ github.actor }} \
          --docker-registry-server-password ${{ secrets.GITHUB_TOKEN }}
        
    - name: Verify Rollback
      run: |
        sleep 60
        curl -f https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/health || exit 1
        
    - name: Notify Rollback
      run: |
        ROLLBACK_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.previous-image.outputs.previous-tag }}"
        curl -X POST "https://api.${{ env.DD_SITE }}/api/v1/events" \
        -H "Content-Type: application/json" \
        -H "DD-API-KEY: ${{ secrets.DATADOG_API_KEY }}" \
        -d '{
          "title": "AjudadoraBot Rollback (nerdctl)",
          "text": "Rolled back deployment due to failure. Rollback image: '$ROLLBACK_IMAGE'. Built with nerdctl + containerd.",
          "tags": ["environment:production", "service:ajudadorabot", "rollback", "build-tool:nerdctl", "runtime:containerd"],
          "alert_type": "warning"
        }' || echo "Failed to notify Datadog"
        
    - name: Azure Logout
      if: always()
      run: az logout