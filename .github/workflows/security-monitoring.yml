name: Security Monitoring & Dependency Updates

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
  push:
    paths:
      - '**/packages.json'
      - '**/*.csproj'
      - '**/Directory.Packages.props'

jobs:
  # ================================
  # Dependency Vulnerability Scan
  # ================================
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0'
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install .NET security scanning tools
      run: |
        dotnet tool install --global Microsoft.CST.DevSkim.CLI
        dotnet tool install --global Security.CodeScan.VS2019
        
    - name: Scan .NET dependencies
      run: |
        dotnet list package --vulnerable --include-transitive > vulnerable-packages.txt
        cat vulnerable-packages.txt
        
    - name: Scan frontend dependencies
      working-directory: frontend
      run: |
        npm audit --audit-level=moderate --json > ../npm-audit.json || true
        
    - name: DevSkim Security Scan
      run: |
        devskim analyze . --output-format sarif --output-file devskim-results.sarif || true
        
    - name: Upload vulnerability scan results
      uses: actions/upload-artifact@v4
      with:
        name: vulnerability-scan-results
        path: |
          vulnerable-packages.txt
          npm-audit.json
          devskim-results.sarif
          
    - name: Upload DevSkim results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: devskim-results.sarif

  # ================================
  # Automated Dependency Updates
  # ================================
  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0'
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Update .NET packages
      run: |
        # Update all packages to latest minor/patch versions
        for project in $(find . -name "*.csproj"); do
          echo "Updating packages in $project"
          dotnet add "$project" package --no-restore || true
        done
        
    - name: Update Node.js packages
      working-directory: frontend
      run: |
        npm update
        npm audit fix --audit-level=moderate || true
        
    - name: Check for changes
      id: changes
      run: |
        if git diff --quiet; then
          echo "has_changes=false" >> $GITHUB_OUTPUT
        else
          echo "has_changes=true" >> $GITHUB_OUTPUT
        fi
        
    - name: Create Pull Request
      if: steps.changes.outputs.has_changes == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'chore: update dependencies'
        title: 'Automated Dependency Updates'
        body: |
          This PR contains automated dependency updates.
          
          Please review the changes and ensure all tests pass before merging.
          
          - .NET packages updated to latest compatible versions
          - Node.js packages updated and security issues fixed
          
          Auto-generated by GitHub Actions.
        branch: automated-dependency-updates
        delete-branch: true

  # ================================
  # Container Image Security Scan
  # ================================
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Build test image
      run: |
        docker build -f Dockerfile.production -t ajudadorabot:security-test .
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'ajudadorabot:security-test'
        format: 'table'
        exit-code: '0'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'
        
    - name: Run Grype vulnerability scanner
      uses: anchore/scan-action@v3
      with:
        image: 'ajudadorabot:security-test'
        fail-build: false
        
    - name: Upload Anchore scan SARIF report
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: results.sarif

  # ================================
  # License Compliance Check
  # ================================
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0'
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install license checker tools
      run: |
        npm install -g license-checker
        dotnet tool install --global dotnet-project-licenses
        
    - name: Check .NET licenses
      run: |
        dotnet-project-licenses -i . -o licenses-dotnet.json -f json
        
    - name: Check Node.js licenses
      working-directory: frontend
      run: |
        license-checker --json --out ../licenses-nodejs.json
        
    - name: Upload license reports
      uses: actions/upload-artifact@v4
      with:
        name: license-reports
        path: |
          licenses-dotnet.json
          licenses-nodejs.json

  # ================================
  # Security Policy Compliance
  # ================================
  compliance-check:
    name: Security Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Check security.md exists
      run: |
        if [ ! -f "SECURITY.md" ]; then
          echo "::warning::SECURITY.md file not found"
        fi
        
    - name: Check dependabot configuration
      run: |
        if [ ! -f ".github/dependabot.yml" ]; then
          echo "::warning::Dependabot configuration not found"
        fi
        
    - name: Validate Dockerfile security practices
      run: |
        # Check for non-root user
        if ! grep -q "USER " Dockerfile.production; then
          echo "::error::Dockerfile does not specify non-root user"
          exit 1
        fi
        
        # Check for HEALTHCHECK
        if ! grep -q "HEALTHCHECK" Dockerfile.production; then
          echo "::warning::Dockerfile does not include HEALTHCHECK"
        fi
        
        # Check for specific security labels
        if ! grep -q "security.scan" Dockerfile.production; then
          echo "::warning::Dockerfile missing security scan labels"
        fi

  # ================================
  # Notify Security Issues
  # ================================
  notify-security:
    name: Notify Security Issues
    runs-on: ubuntu-latest
    needs: [dependency-scan, container-security]
    if: always()
    
    steps:
    - name: Download scan results
      uses: actions/download-artifact@v4
      with:
        name: vulnerability-scan-results
        path: scan-results/
        
    - name: Process scan results
      id: process
      run: |
        # Count critical/high vulnerabilities
        VULN_COUNT=0
        if [ -f "scan-results/npm-audit.json" ]; then
          VULN_COUNT=$(jq -r '.metadata.vulnerabilities.high + .metadata.vulnerabilities.critical' scan-results/npm-audit.json 2>/dev/null || echo 0)
        fi
        
        echo "vulnerability_count=$VULN_COUNT" >> $GITHUB_OUTPUT
        
    - name: Create security issue
      if: steps.process.outputs.vulnerability_count > 0
      uses: actions/github-script@v7
      with:
        script: |
          const vulnCount = '${{ steps.process.outputs.vulnerability_count }}';
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Security Alert: ${vulnCount} vulnerabilities found`,
            body: `**Security Scan Results**
            
            ðŸš¨ **${vulnCount} high/critical vulnerabilities** were found in dependencies.
            
            **Action Required:**
            1. Review the vulnerability scan artifacts
            2. Update affected dependencies
            3. Test the application thoroughly
            4. Deploy security updates
            
            **Scan Details:**
            - Workflow: ${{ github.workflow }}
            - Run: ${{ github.run_id }}
            - Commit: ${{ github.sha }}
            
            This issue was automatically created by the security monitoring workflow.`,
            labels: ['security', 'vulnerability', 'high-priority']
          });
          
    - name: Notify Slack
      if: steps.process.outputs.vulnerability_count > 0
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#security-alerts'
        text: |
          ðŸš¨ Security Alert: ${{ steps.process.outputs.vulnerability_count }} vulnerabilities found in AjudadoraBot
          
          Please review and update dependencies immediately.
          
          Repository: ${{ github.repository }}
          Workflow: ${{ github.workflow }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK_URL }}