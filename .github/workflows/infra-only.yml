name: Terraform Infra (Plan/Apply)

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Choose Terraform action'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      state_rg:
        description: 'State Resource Group (optional)'
        required: false
        type: string
      state_sa:
        description: 'State Storage Account (optional)'
        required: false
        type: string
      state_container:
        description: 'State Container (optional, default tfstate)'
        required: false
        type: string
      auto_approve:
        description: 'Auto approve apply'
        required: false
        default: false
        type: boolean
  push:
    branches: [ 'infra/**' ]

permissions:
  contents: read

concurrency:
  group: terraform-${{ github.ref }}
  cancel-in-progress: true

jobs:
  terraform:
    name: Terraform ${{ inputs.action || 'plan' }} (${{ inputs.environment || 'production' }})
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'production' }}
    timeout-minutes: 45

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.12.2

    - name: Azure Login (Service Principal)
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Terraform Init (remote backend)
      working-directory: ./terraform
      env:
        ARM_CLIENT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientId }}
        ARM_CLIENT_SECRET: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientSecret }}
        ARM_TENANT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).tenantId }}
        ARM_SUBSCRIPTION_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).subscriptionId }}
      run: |
        set -e
        # Use inputs if provided, otherwise use repository variables
        RG="${{ inputs.state_rg || vars.AZURE_TF_STORAGE_ACCOUNT_NAME }}"
        SA="${{ inputs.state_sa || vars.AZURE_TF_STORAGE_ACCOUNT_NAME }}"
        CT="${{ inputs.state_container || vars.AZURE_TF_CONTAINER_NAME }}"
        KEY="${{ vars.AZURE_TF_TFSTATE_NAME }}"
        ACCESS_KEY="${{ secrets.AZURE_TF_STORAGE_ACCOUNT_ACCESSKEY }}"
        
        if [ -z "$RG" ] || [ -z "$SA" ] || [ -z "$CT" ] || [ -z "$KEY" ] || [ -z "$ACCESS_KEY" ]; then
          echo "ERROR: Missing required variables or secrets:"
          echo "  AZURE_TF_STORAGE_ACCOUNT_NAME: ${RG:-NOT_SET}"
          echo "  AZURE_TF_STORAGE_ACCOUNT_NAME: ${SA:-NOT_SET}"
          echo "  AZURE_TF_CONTAINER_NAME: ${CT:-NOT_SET}"
          echo "  AZURE_TF_TFSTATE_NAME: ${KEY:-NOT_SET}"
          echo "  AZURE_TF_STORAGE_ACCOUNT_ACCESSKEY: ${ACCESS_KEY:+SET}"
          echo "Falling back to local state."
          terraform init -upgrade
          exit 0
        fi
        
        echo "Initializing Terraform backend with access key auth..."
        terraform init -upgrade \
          -backend-config="resource_group_name=$RG" \
          -backend-config="storage_account_name=$SA" \
          -backend-config="container_name=$CT" \
          -backend-config="key=$KEY" \
          -backend-config="access_key=$ACCESS_KEY"

    - name: Terraform Validate
      working-directory: ./terraform
      run: terraform validate

    - name: Terraform Plan
      if: ${{ inputs.action == 'plan' || inputs.action == '' }}
      working-directory: ./terraform
      env:
        ARM_CLIENT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientId }}
        ARM_CLIENT_SECRET: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientSecret }}
        ARM_TENANT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).tenantId }}
        ARM_SUBSCRIPTION_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).subscriptionId }}
        TF_VAR_environment: ${{ inputs.environment || 'production' }}
        TF_VAR_telegram_bot_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TF_VAR_datadog_api_key: ${{ secrets.DATADOG_API_KEY }}
        TF_VAR_ghcr_username: ${{ github.actor }}
        TF_VAR_ghcr_token: ${{ secrets.GITHUB_TOKEN }}
      run: terraform plan -out=tfplan

    - name: Terraform Apply
      if: ${{ inputs.action == 'apply' }}
      working-directory: ./terraform
      env:
        ARM_CLIENT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientId }}
        ARM_CLIENT_SECRET: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientSecret }}
        ARM_TENANT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).tenantId }}
        ARM_SUBSCRIPTION_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).subscriptionId }}
        TF_VAR_environment: ${{ inputs.environment || 'production' }}
        TF_VAR_telegram_bot_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TF_VAR_datadog_api_key: ${{ secrets.DATADOG_API_KEY }}
        TF_VAR_ghcr_username: ${{ github.actor }}
        TF_VAR_ghcr_token: ${{ secrets.GITHUB_TOKEN }}
      run: |
        if [ "${{ inputs.auto_approve }}" = "true" ]; then
          terraform apply -auto-approve tfplan || terraform apply -auto-approve
        else
          terraform apply tfplan || terraform apply
        fi

    - name: Show Outputs
      if: always()
      working-directory: ./terraform
      run: |
        terraform output || true
